- 외래키
    
    [정의]
    - 한 테이블의 컬럼이 다른 테이블의 기본 키(Primary Key, PK)와 연결되는 것
    - 두 테이블을 연결하는 다리 역할
    
    [사용해야하는 이유]
    (1) 데이터 무결성 유지
    - 외래키를 설정하면 없는 데이터 참조할 수 없음
    - 관련된 데이터가 자동으로 업데이트되거나 삭제될 수도 있음
    (2) 중복 데이터 방지
    - 중복된 데이터를 여러 테이블에 넣지 않아도 돼요.
    (3) 쿼리 최적화
    - 조인(JOIN) 쿼리를 쉽게 실행할 수 있음
    
- 기본키
    
    각 행(row)을 유일하게 식별하는 키
    
- ER 다이어그램
    
    데이터베이스의 구조를 그림으로 표현한 것
    데이터를 어떻게 저장할지, 어떤 테이블이 있고, 어떻게 연결되는지를 한눈에 볼 수 있음
    개체(Entity), 속성(Attribute), 관계(Relationship)**로 구성
    
- 복합 키
    
    두 개 이상의 컬럼을 합쳐서 기본 키(PK)로 사용하는 것
    
- 연관관계
    
    두 개 이상의 테이블이 서로 어떻게 연결되는지를 의미
    
    1:1 관계 (One-to-One)
    **학생**(학생 ID) → **학생증**(학생증 ID)
    
    한 명의 학생이 한 개의 학생증만 가질 수 있음
    
    **1:N 관계 (One-to-Many)**
    
    **반**(반 ID) → **학생**(학생 ID)
    
    한 개의 반에는 여러 명의 학생이 있을 수 있음
    
    **N:M 관계 (Many-to-Many)
    학생**(학생 ID) → **과목**(과목 ID)
    
- 정규화
    
    데이터 중복을 줄이고, 데이터 무결성을 유지
    
    1. 제1 정규화 (1NF): 모든 컬럼이 원자값(Atomic Value)을 가져야 함.
        - ❌ `전화번호: "010-1234-5678, 010-9876-5432"` (X)
        - ✅ `전화번호 테이블 따로 분리` (O)
    2. 제2 정규화 (2NF): 기본 키의 부분 종속성 제거
        - ❌ 학생 테이블에 "학과 이름"을 직접 저장 (X)
        - ✅ 학과 테이블을 따로 만들어 학과 ID로 참조 (O)
    3. 제3 정규화 (3NF): 이행 종속성 제거
        - ❌ "학생 테이블에 학과 ID → 학과장 이름" 저장 (X)
        - ✅ 학과 테이블을 따로 만들어 학과장 정보 포함 (O)
    
    **정규화를 하면 중복이 줄어들고, 데이터 변경 시 오류가 줄어듬**
    
    
- 반 정규화
    
    정규화된 테이블을 다시 합쳐서 성능을 높이는 과정